<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	
	<resultMap type="Member" id="memberResultSet">
		<result column="USER_ID" property="userId"/>
		<result column="USER_PWD" property="userPwd"/>
		<result column="USER_NAME" property="userName"/>
		<result column="USER_NICKNAME" property="userNickname"/>
		<result column="EMAIL" property="email"/>
		<result column="GENDER" property="gender"/>
		<result column="AGE" property="age"/>
		<result column="MBTI" property="MBTI"/>
		<result column="TAG_WORD" property="tagWords"/>
		<result column="PHONE" property="phone"/>
		<result column="ENROLL_DATE" property="enrollDate"/>
		<result column="MODIFY_DATE" property="modifyDate"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	
	
	
	<select id="loginMember" resultMap="memberResultSet">
	  SELECT USER_ID
		    ,USER_PWD
		    ,USER_NAME
		    ,EMAIL
		    ,GENDER
		    ,AGE
		    ,PHONE
		    ,ENROLL_DATE
		    ,MODIFY_DATE
		    ,STATUS
		    ,PROFILE
		    ,MYPROFILE
		FROM MEMBER
		WHERE USER_ID = #{userId}
<!-- 	암호화 작업 후 조회할땐 아이디만 가지고 조회하기  
		비밀번호는 확인할수없음 - 이미 암호화 처리되어있기 때문	-->
<!-- 		AND USER_PWD= #{userPwd} -->
		AND STATUS='Y'
	</select>
	
	
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER(
						  USER_ID
						  ,USER_PWD
						  ,USER_NAME
						  ,USER_NICKNAME
						  ,EMAIL
						  ,GENDER
						  ,AGE
						  ,PHONE)
            VALUES(
            		#{userId}
            	   ,#{userPwd}
            	   ,#{userName}
            	   ,#{userNickname}
            	   ,#{email}
            	   ,#{gender}
            	   ,#{age}
            	   ,#{phone}
            	 )
	</insert>
	
	
	
	<insert id="insertNaverUser" parameterType="Member">
		INSERT INTO MEMBER(
						  USER_ID
						  ,USER_PWD
						  ,USER_NAME
						  ,USER_NICKNAME
						  ,EMAIL
						  ,GENDER
						  ,PHONE)
            VALUES(
            		#{userId}
            	   ,#{userPwd}
            	   ,#{userName}
            	   ,#{userNickname}
            	   ,#{email}
            	   ,#{gender}
            	   ,#{phone}
            	 )
	</insert>
	
	<insert id="insertKakaoUser" parameterType="Member">
		INSERT INTO MEMBER(
						  USER_ID
						  ,USER_PWD
						  ,USER_NAME)
            VALUES(
            		#{userId}
            	   ,#{userPwd}
            	   ,#{userName}
            	 )
	</insert>
	
	<insert id="insertGoogleUser" parameterType="Member">
		INSERT INTO MEMBER(
						  USER_ID
						  ,USER_PWD
						  ,USER_NAME
						  ,USER_NICKNAME
						  ,EMAIL)
            VALUES(
            		#{userId}
            	   ,#{userPwd}
            	   ,#{userName}
            	   ,#{userNickname}
            	   ,#{email}
            	 )
	</insert>
	
	<select id="getMemberById" parameterType="String" resultMap="memberResultSet">
		SELECT USER_ID
		    ,USER_PWD
		    ,USER_NAME
		    ,EMAIL
		    ,GENDER
		    ,AGE
		    ,PHONE
		    ,ENROLL_DATE
		    ,MODIFY_DATE
		    ,STATUS
		    ,TAG_WORD
		    ,MBTI
		FROM MEMBER
		WHERE USER_ID = #{userId}
		AND STATUS='Y'
	</select>
	
	<select id="findIdByEmail" parameterType="String" resultType="String">
		SELECT USER_ID
		FROM MEMBER
		WHERE EMAIL=#{byEmail}
		AND STATUS='Y'
	</select>
	
	<update id="insertMBTI" parameterType="Member">
		UPDATE MEMBER SET MBTI=#{MBTI}
		WHERE USER_ID=#{userId}
	</update>
	
	<update id="insertWords" parameterType="Member">
		UPDATE MEMBER SET TAG_WORD=#{tagWords}
		WHERE USER_ID=#{userId}
	</update>
	

	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER
		SET USER_NAME = #{userName}
		   ,EMAIL = #{email}
		   ,AGE = #{age}
		   ,PHONE = #{phone}
		   ,GENDER = #{gender}
		   ,MODIFY_DATE = SYSDATE
		WHERE USER_ID = #{userId}
		AND STATUS = 'Y'
	</update>
	
	<update id="updatePwd" parameterType="Member">
		UPDATE MEMBER
		SET USER_PWD=#{userPwd}
		WHERE USER_ID=#{userId}
		AND STATUS='Y'
	</update>
	
	
	
	<update id="deleteMember" parameterType="string">
		UPDATE MEMBER
		SET STATUS = 'N'
		WHERE USER_ID = #{userId}
		AND STATUS = 'Y'
	</update>
	
	<select id="checkId" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE USER_ID = #{checkId}
	</select>
	
	<select id="checkEmail" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE EMAIL = #{checkEmail}
	</select>
	
	<update id="pushProfile" parameterType="Member">
	UPDATE MEMBER
	SET	PROFILE=#{profile},
		MYPROFILE=#{myProfile},
		USER_NICKNAME=#{userNickname}
	WHERE USER_ID=#{userId}
	</update>
	
	<resultMap type="Trip" id="tripResultSet">
		<result column="CONTENT_ID" property="contentId" />
		<result column="CONTENT_TYPE_ID" property="contentTypeId" />
		<result column="TITLE" property="title" />
		<result column="ADDR1" property="addr1" />
		<result column="ADDR2" property="addr2" />
		<result column="ZIP_CODE" property="zipCode" />
		<result column="AREA_CODE" property="areaCode" />
		<result column="FIRST_IMAGE2" property="firstImage2" />
		<result column="FIRST_IMAGE" property="firstImage1" />
	</resultMap>
	
	<select id="selectFavor" resultMap="tripResultSet">
		<![CDATA[SELECT T.CONTENT_ID,FIRST_IMAGE2,TITLE, ADDR1
		FROM TRIP T
		JOIN LIKES L ON (T.CONTENT_ID=L.CONTENT_ID)
		WHERE ROWNUM <=]]>5 AND L.USER_ID=#{userId}
		ORDER BY L.LIKE_NO DESC
	</select>
	
</mapper>
